security:

    role_hierarchy:
        ROLE_USER: ROLE_USER
        ROLE_ADMIN: ROLE_USER
        ROLE_PROJECT_SERVANT: [ROLE_PROJECT_SERVANT, ROLE_ADMIN, ROLE_USER]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_PROJECT_SERVANT, ROLE_ALLOWED_TO_SWITCH]

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 
            algorithm: 'bcrypt'
            cost: 10
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Authentication\Entity\UserAuthentication
                property: email

        api_user_provider:
            lexik_jwt: 
                class: App\Api\Security\ApiUser


    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            provider: app_user_provider
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            provider: api_user_provider
            jwt: ~
        
        main:
            lazy: true
            provider: app_user_provider
            user_checker: App\Authentication\Security\UserChecker

            form_login:
                login_path: login
                check_path: login
                default_target_path: home
                use_referer: false
                enable_csrf: true

            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 31536000 #1 year in second

            logout: 
                path: logout
                target: login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }

        # API
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/me$,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/users$,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/user/,       roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/avatar/,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
